'''
The problem statement : 
    * 
    *

The objective : 
    *
    *

Pseudocode : 
    *
    *

Result :
    *
    *

New libraries used :
    *
    *

'''

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import json
from dash import Dash, html
from datetime import datetime

## From the list of available FRED APIs, we chose to use the series/observations endpoint to deliver the datasets. Other endpoints used were 'category/series' and '/series' to provide the list of available datasets and the metadata of individual ones.
url = 'https://api.stlouisfed.org/fred/series/observations'

# Initializing and declaring environment variables
results = []
fred_api_key = '1d90de899e9698a2924f22d85c093fe6'
series_identifiers = ['STTMINWGNY','STTMINWGTX','STTMINWGIL','STTMINWGVA','STTMINWGCA']
state_labels = ['New York','Texas','Illinois','Virginia','California']
line_colors = ['orange','purple','green','cyan','red']

#fetching and storing federal data to use as the baseline 
params = {'series_id': 'STTMINWGFG',
        'api_key': fred_api_key,
          'file_type':'json'}
response = requests.get(url,params = params)
if response.status_code == 200:
  data = response.json()
  obs = data.get('observations', [])
  df_base = pd.DataFrame(obs) 
  print(df_base.head())
  df_base['value'] = pd.to_numeric(df_base['value'], errors = 'coerce')
  df_base['date'] = pd.to_datetime(df_base['date'], errors = 'coerce')
  

  #establish the plot size prior to plotting the lines in the if statement
plt.figure(figsize = (12,6))
plt.ylim(-0.2,10)
# Fetching individual state data to then compare against the Federal minimum and plot on a Line chart. 
for count,i in enumerate(series_identifiers) :
    params = {
        'series_id': i,
        'api_key': fred_api_key,
        'file_type': "json"
        }
    
    response = requests.get(url, params=params) # GET method used to call FRED

    '''# to test endpoint response
    if response.status_code == 200:
        data = response.json()
        print(json.dumps(data,indent=4))
    else:
        print("Error:", response.status_code, response.text)'''

    if response.status_code == 200: # Successful Request, all other codes indicated error in payload/server-side
        data = response.json()
        obs = data.get('observations', [])
        df = pd.DataFrame(obs)
        df['value'] = pd.to_numeric(df['value'],errors='coerce') 
        df['date'] = pd.to_datetime(df['date'],errors='coerce')
        df = pd.merge(df_base, df, on = 'date', how = 'left' )
        df.fillna(0, inplace = True)
        #print(df)
        df['value_y'] = df['value_y']-df_base['value']
        df['value_y'][df['value_y']<0] = 0  # keep only values above federal
       
        plt.plot(df['date'], df['value_y'], linestyle='-',color = line_colors[count],label=state_labels[count],marker='.')
            
        #df['value'] = df['value'] * 100
        #print(df.head())

        ending_mw,end_loc = df['value_y'].iloc[-1],df['date'].iloc[-1] ## FROM GPT

        y_offset = 0.1 # vertical shift to avoid overlap ~~ FROM GPT
        plt.text(end_loc, ending_mw + count * y_offset, f"{ending_mw:.2f}",fontsize=8,color = line_colors[count], ha='left', va='bottom')

    else:
        print('Error:', response.status_code, response.text)

plt.title(f"State-Wise Minimum Wage Rates of select states above the federal minimum: (1968 to 2025)")
plt.xlabel("Year")
plt.ylabel("Minimum Wage (USD)")
plt.grid(True)

plt.legend()
plt.savefig(f"assets/Wage_graph.png")


# Creating the dash app

app = Dash(__name__)
app.title = 'State Minimum Wages'

app.layout = html.Div([
    html.H1('Analysis of State-wise Minimum wage trends', style = {'font' = 'Montserrat'}),
    html.P('Placeholder', style={'color':'#000000','fontSize':'20px','backgroundColor':'#ffffff'}),
    html.Img(src=f'assets/Wage_graph.png')
])


#Running the app
if __name__ == "__main__":
   app.run(debug = True, use_reloader = False)